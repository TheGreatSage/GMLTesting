<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Whatever
selected=gun;
hp=0;
enteredit=false;
exitedit=false;
EM=false;
locked=false;
changingname=false;
ttext='';


scale=3; // Sprite Scale
xx=175;  // Sprite Pos
yy=128;  // Sprite Pos
var i;
for (i=0;i&lt;25;i++){
    timer[i]=100;
    ton[i]=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Locked?

if changingname{
   locked=true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Gun
selected=gun;
if hp == 0 {
if keyboard_check_pressed(vk_up) {
   if gun != 10 {
      gun += 1;
      hp = 7;
   } else { gun = 1; hp = 7;}
} 
if keyboard_check_pressed(vk_down) {
   if gun != 1 {
      gun -= 1;
      hp = 7;
   } else { gun = 10; hp = 7;}
} 
if mouse_wheel_up() {
   if gun != 10 {
      gun += 1;
      hp = 7;
   } else { gun = 1; hp = 7;}
} 
if mouse_wheel_down() {
   if gun != 1 {
      gun -= 1;
      hp = 7;
   } else { gun = 10; hp = 7;}
} 
} else {
  hp -= 1;
}

if keyboard_check_pressed(vk_escape) {
   room_goto(room_menus);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Timers
var i;
for (i=0; i&lt;25; i++) {
    if timer[i] &gt; 0 &amp;&amp; ton[i]{
       switch i{
              default:
                      timer[i] -= 1;
                      break;
       }
       
    } else if timer[i] &lt; 0 {
       timer[i] = 100;
       ton[i] = false;
    } else if timer[i]==0 &amp;&amp; ton[i] {
       ton[i]=false;
       timer[i]=100;
       switch i{       
              default:
                      break;
              case 1:
                   enteredit=false;
                   ttext=GUN[selected, 20];
                   instance_create(280,225,obj_dummy_person);
                   instance_create(224,256,obj_save_gun);
                   EM=true
                   break;
       }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Edit Mode

if changingname{
   if keyboard_lastkey != -1 &amp;&amp;  string_length(ttext) &lt; 11 &amp;&amp; keyboard_lastkey != vk_backspace &amp;&amp; keyboard_lastkey != 35{
      ttext+=keyboard_lastchar;
      keyboard_lastkey=-1;
   }  else if keyboard_lastkey != -1 &amp;&amp;  string_length(ttext) &lt; 11 &amp;&amp; keyboard_lastkey == vk_backspace{
      ttext=string_copy(ttext,1,string_length(ttext)-1)
      keyboard_lastkey=-1;
   }
}


if enteredit {
    ton[1]=true;
    if scale &gt; 1 { scale-=0.1; }
       if xx + GUN[selected, 1] &lt; 280 {
      xx+=1;
   }
   if yy + GUN[selected, 2] &lt; 225 {
      yy+=1;
   }
   if xx + GUN[selected, 1] &gt; 280 {
      xx-=1;
   }
   if yy + GUN[selected, 2] &gt; 225 {
      yy-=1;
   }
}
if EM {
   if xx + GUN[selected, 1] &lt; 280 {
      xx+=1;
   }
   if yy + GUN[selected, 2] &lt; 225 {
      yy+=1;
   }
   if xx + GUN[selected, 1] &gt; 280 {
      xx-=1;
   }
   if yy + GUN[selected, 2] &gt; 225 {
      yy-=1;
   }
   
   
   if mouse_check_button_pressed(mb_left) {
      if point_in_rectangle(mouse_x, mouse_y, 170-64, 106-12, 170+64, 106+12) &amp;&amp; !changingname{
         changingname=true;
         keyboard_lastkey=-1;
      } else if changingname {
             changingname=false;
             locked=false;
             if ttext==''{
                ttext=GUN[selected, 20];
             }
      }
   }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stuff


/** VARIABLES TO KNOW
0 = spr
1 = posx
2 = posy
3 = img_speed
4 = img_index
5 = Ammo
6 = Max Ammo
7 = Can Shoot
8 = BarrelX
9 =  Reload Time
10 = Bullet SPEED
11 = Bullet Wait
12 = Bullet Timer
13 = Accuracy
14 = Reload Timer
15 = Extra Var 1
16 = Unlocked
17 = shooting script
18 = Damage
19 = ----
20 = Name
***/




// Base Stuff
var i;
for (i=1; i != 20; i++) {
switch i{
       case 1:
            draw_default();
            draw_set_halign(fa_left);
            if ttext == GUN[selected,20] || ttext == '' {
               draw_text(2, 96 + (i*10), 'Name: ' + string(GUN[selected, 20]) );
            } else {
               draw_text(2, 96 + (i*10), 'Name: ' + string(GUN[selected, 20] + '(' + string(ttext) + ')') );
            }
            break;
       case 2:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Sprite: ' + string(GUN[selected, 0]) );

            break;
       case 3:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Offx: ' + string(GUN[selected, 1]) );

            break;
       case 4:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Offy: ' + string(GUN[selected, 2]) );

            break;
       case 5:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Image Speed: ' + string(GUN[selected, 3]) );

            break;
       case 6:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Image Index: ' + string(GUN[selected, 4]) );

            break;
       case 7:
            draw_default();
            draw_set_halign(fa_left);
            draw_set_color(c_red);
            draw_text(2, 96+ (i*10), 'Ammo: ' + string(GUN[selected, 5]) );

            break;
       case 8:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Max Ammo: ' + string(GUN[selected, 6]) );

            break;
       case 9:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Barrel Pos: ' + string(GUN[selected, 8]) );

            break;
       case 10:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Reload Time: ' + string(GUN[selected, 9]) );

            break;
       case 11:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Bullet Speed: ' + string(GUN[selected, 10]) );

            break;
       case 12:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Bullet Wait: ' + string(GUN[selected, 11]) );

            break;
       case 13:
            draw_default();
            draw_set_halign(fa_left);
            draw_set_color(c_red);
            draw_text(2, 96+ (i*10), 'Bullet Timer: ' + string(GUN[selected, 12]) );

            break;
       case 14:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Accuracy: ' + string(GUN[selected, 13]) );

            break;
       case 15:
            draw_default();
            draw_set_halign(fa_left);
            draw_set_color(c_red);
            draw_text(2, 96+ (i*10), 'Reload Timer: ' + string(GUN[selected, 14]) );

            break;
       case 16:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Extra : ' + string(GUN[selected, 15]) );

            break;
       case 17:
            draw_default();
            draw_set_halign(fa_left);
            draw_set_color(c_red);
            draw_text(2, 96+ (i*10), 'Unlocked: ' + string(GUN[selected, 16]) );

            break;
       case 18:
            draw_default();
            draw_set_halign(fa_left);
            draw_text(2, 96+ (i*10), 'Damage: ' + string(GUN[selected, 18]) );

            break;
       case 19:
            draw_default();
            draw_set_halign(fa_left);
            draw_set_color(c_red);
            draw_text(2, 96+ (i*10), 'Can Shoot: ' + string(GUN[selected, 7]) );

            break;
}}
draw_default();
// Edit Mode Unlocked
if EM &amp;&amp; !locked {
       draw_default();
       draw_sprite(spr_menu_button,0,200,106);
       draw_text(200, 106, 'Change Name');
       draw_sprite(spr_menu_button,0,200,136);
       draw_text(200, 136, 'Change Offset');
       draw_sprite(spr_menu_button,0,200,166);
       draw_text(200, 166, 'Edit Image');
       draw_sprite(spr_menu_button,0,200,196);
       draw_text(200, 196, 'Edit Stats');
} else if EM &amp;&amp; changingname {
       draw_default();
       draw_sprite(spr_name_button, 0, 200, 106);
       draw_text(200,106, ttext);
}

draw_sprite_ext(GUN[selected, 0], GUN[selected, 4], xx, yy,scale,scale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
