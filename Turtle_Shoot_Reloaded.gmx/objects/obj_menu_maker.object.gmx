<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creation
update=true;
// Order
type[1]='other';
type[2]='turtle';
type[3]='edit';
type[4]='factory';
type[5]='';
// Order info
ordmin=1;
ordmax=5;
order=4;
ordminus=3;
ordplus=2;
// Update
hp=0;
rot=0;
spin=0;
alpha=0;
at=0;
// Drawing
sur1=surface_create(128,128);
sur2=surface_create(128,128);
sur3=surface_create(128,128);
txxt='';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update
if update==true {
    //ordminus
    if order-1&lt;ordmin {
       ordminus=ordmax;
    } else {
       ordminus=order-1;
    }
    //ordplus
    if order+1&gt;ordmax {
       ordplus=ordmin;
    } else {
       ordplus=order+1;
    }   
    // Text
    switch type[order] {
           default:
                txxt='Work in Progress';
                break;
           case 'turtle':
                txxt='Press Enter';
                break;
           case 'edit':
                txxt='Press Enter';
                break;
           case 'factory':
                txxt='Press Enter';
                break;
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle
if hp == 0 {
   if keyboard_check_pressed(vk_left) || mouse_wheel_down(){
      if order==ordmax {order=ordmin;} else {order++;}
      hp=7
   }
   if keyboard_check_pressed(vk_right) || mouse_wheel_up() {
      if order==ordmin {order=ordmax;} else {order--;}
      hp=7
   }
} else {
  hp--;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keys
if oTerminal.priority == 0 {   
   // Enter
   if keyboard_check_pressed(vk_enter) {
      switch type[order] {
             default:
                  break;
             case 'turtle':
                  room_goto(room_defend);
                  break;
             case 'edit':
                  room_goto(room_editor);
                  break;
             case 'factory':
                  room_goto(room_factory);
                  break;
      }
   }

    // Virtual Key
    if mouse_check_button_pressed(mb_any) {
        if point_in_rectangle(mouse_x, mouse_y, 96, 86, 128, 128 ) {
           keyboard_key_press(vk_enter);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotations
if rot==0{
   rot=1;
} else {
   rot=0;
}
if spin&gt;=360 {
   spin=0;
} else {
   spin+=4;
}

if alpha != -0.2 &amp;&amp; at = 0 {   
   alpha-=0.025;  
} else if alpha == -0.2 &amp;&amp; at == 0 {  
   at=1;
}
if alpha != 1 &amp;&amp; at = 1 {
   alpha+=0.025;
} else if alpha == 1 &amp;&amp; at ==1 {
   at=0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surface
if !surface_exists(sur1) {
   sur1=surface_create(128,128);
} else {
  draw_surface_part(sur1,0,0,64,128,32,128);
}
if !surface_exists(sur2) {
   sur2=surface_create(128, 128);
} else {
  draw_surface_part(sur2, 0, 0, 128, 128, 96, 128)
}
if !surface_exists(sur3) {
   sur3=surface_create(128,128);
} else {
  draw_surface_part(sur3,64,0,64,128,224,128);
}

draw_words(txxt, 160, 118, .3, alpha);

//Ordering
switch type[ordminus] {
       default:
            scr_menu_select_noone(sur1, false);
            break;
       case 'turtle':
            scr_menu_select_turtle(sur1, false);
            break;
       case 'other':
            scr_menu_select_other(sur1, false);
            break;
       case 'edit':
            scr_menu_select_editor(sur1, false);
            break;
       case 'factory':
            scr_menu_select_factory(sur1, false);
            break;
}
switch type[order] {
       default:
            scr_menu_select_noone(sur2, true);
            break;
       case 'turtle':
            scr_menu_select_turtle(sur2, true);
            break;
       case 'other':
            scr_menu_select_other(sur2, true);
            break;
       case 'edit':           
            scr_menu_select_editor(sur2, true);
            break;
       case 'factory':
            scr_menu_select_factory(sur2, true);
            break;
}
switch type[ordplus] {
       default:
            scr_menu_select_noone(sur3, false);
            break;
       case 'turtle':
            scr_menu_select_turtle(sur3, false);
            break;
       case 'other':
            scr_menu_select_other(sur3, false);
            break;
       case 'edit':
            scr_menu_select_editor(sur3, false);
            break;
       case 'factory':
            scr_menu_select_factory(sur3, false);
            break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
